"""
	- It receives an execution result of fuzzer with a failing test case
	- Bug-specific test oracles: target_failure type & top 2 stack trace
"""

import sys
import re

target_failure_type = "memory leaks"
target_failure_stack_trace = ['#0.*:98', '#1.*:1447']
other_failure = {"heap-buffer-overflow" : ['#0.*.:1492', r'(#0.*:80:)*(#1.*:96:)*(#2.*:125:)*(#3.*:185:)',\
r'(#0.*:22:)*(#1.*:154)*(#2.*:659:)',
				r'(#0.*:80:)*(#1.*:96:)*(#2.*:125:)*(#3.*:156:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*:125:)*(#3.*:154:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*:125:)*(#3.*:373:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*:125:)*(#3.*:248:)*(#4.*:343:)*(#5.*:60:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*:125:)*(#3.*:467:)*(#4.*:181:)*(#5.*:117:)*' + \
					r'(#6.*:945:)*(#7.*:860:)*(#8.*:2509:)*(#9.*:2762:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*.:125:)*(#3.*:467:)*(#4.*:181:)*(#5.*:117.*:)' + \
					r'(#6.*.:945:)*(#7.*:860:)*(#8.*:2509:)*(#9.*:2775:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*.:125.)*(#3.*:248:)*(#4.*:343:)*(#5.*:181:)*' + \
					r'(#6.*.:117.)*(#7.*:945:)*(#8.*:860:)*(#9.*:2509:)*(#10.*:2762:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*.:125.)*(#3.*:248:)*(#4.*:343:)*(#5.*:181:)*' + \
					r'(#6.*.:117.)*(#7.*:945:)*(#8.*:860:)*(#9.*:2509:)*(#10.*:2775:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*.:125.)*(#3.*:180:)*(#4.*:421:)*(#5.*.:181:)*' + \
					r'(#6.*.:117.)*(#7.*:945:)*(#8.*:860:)*(#9.*:2509:)*(#10.*:2762:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*.:125.)*(#3.*:180:)*(#4.*:421:)*(#5.*:181:)*' + \
					r'(#6.*.:117.)*(#7.*:945:)*(#8.*:860:)*(#9.*:2509:)*(#10.*:2775:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*.:125.)*(#3.*:248:)*(#4.*:343:)*(#5.*.:181:)*' + \
					r'(#6.*.:117.)*(#7.*:945:)*(#8.*:860:)*(#9.*:2509:)*(#10.*:2509:)*(#11.*:2762:)', \
				r'(#0.*:80:)*(#1.*:96:)*(#2.*.:125.)*(#3.*:248:)*(#4.*:343:)*(#5.*:181:)*' + \
					r'(#6.*:117:)*(#7.*:945:)*(#8.*:860:)*(#9.*:2509:)*(#10.*:2509:)*(#11.*:2775:)'] ,
		"SEGV on unknown address 0x000000000000" : ['#0.*.:249', \
				r'(#0.*:2731:)*(#1.*:374:)',
				r'(#0.*:2731:)*(#1.*:374:)*(#2.*:2669:)*(#3.*:25:)*(#4.*:2668:)*(#5.*:1105:)*' + \
					r'(#6.*1129:)*(#7.*:276:)',
				r'(#0.*:2731:)*(#1.*:374:)*(#2.*:2669:)*(#3.*:25:)*(#4.*:2668:)*(#5.*:1105:)*' + \
					r'(#6.*:1129:)*(#7.*:2623:)'] ,
		"out of memory" : [r'(#0.*:98:)*(#1.*:926:)', r'(#0.*:98:)*(#1.*:182:)'] ,
		"requested allocation size" : [r'(#0.*:98:)*(#1.*:926:)*(#2.*:40:)*(#3.*:945:)*(#4.*:860:)*' + \
						r'(#5.*:2509:)*(#6.*:2775:)*(#7.*:374:)*(#8.*:2669:)',
					r'(#0.*:98:)*(#1.*:926:)*(#2.*:40:)*(#3.*:945:)*(#4.*:860:)*' + \
						r'(#5.*:2509:)*(#6.*:2775:)*(#7.*:374:)*(#8.*:257:)']
		}

f = open(sys.argv[1], 'r')
exec_result = ''.join(f.readlines())
f.close()

n_correct = 0
for st in target_failure_stack_trace:
	if re.search(st, exec_result):
		n_correct += 1

if target_failure_type in exec_result and n_correct == 2:
	print("Find a target_failure by a target bug")
else:
	for t in other_failure:
		if t in exec_result:
			for st in other_failure[t]:
				if re.search(st, exec_result):
					print("This is a failure by an other bug")
					exit()
	print("This is an unknown failure")
